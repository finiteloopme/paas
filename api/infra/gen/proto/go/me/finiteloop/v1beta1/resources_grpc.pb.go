// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: me/finiteloop/v1beta1/resources.proto

package infrav1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InfraResources_ProcessFolder_FullMethodName = "/infrav1beta1.InfraResources/ProcessFolder"
)

// InfraResourcesClient is the client API for InfraResources service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfraResourcesClient interface {
	ProcessFolder(ctx context.Context, in *ProcessFolderRequest, opts ...grpc.CallOption) (*ProcessFolderResponse, error)
}

type infraResourcesClient struct {
	cc grpc.ClientConnInterface
}

func NewInfraResourcesClient(cc grpc.ClientConnInterface) InfraResourcesClient {
	return &infraResourcesClient{cc}
}

func (c *infraResourcesClient) ProcessFolder(ctx context.Context, in *ProcessFolderRequest, opts ...grpc.CallOption) (*ProcessFolderResponse, error) {
	out := new(ProcessFolderResponse)
	err := c.cc.Invoke(ctx, InfraResources_ProcessFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraResourcesServer is the server API for InfraResources service.
// All implementations should embed UnimplementedInfraResourcesServer
// for forward compatibility
type InfraResourcesServer interface {
	ProcessFolder(context.Context, *ProcessFolderRequest) (*ProcessFolderResponse, error)
}

// UnimplementedInfraResourcesServer should be embedded to have forward compatible implementations.
type UnimplementedInfraResourcesServer struct {
}

func (UnimplementedInfraResourcesServer) ProcessFolder(context.Context, *ProcessFolderRequest) (*ProcessFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFolder not implemented")
}

// UnsafeInfraResourcesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfraResourcesServer will
// result in compilation errors.
type UnsafeInfraResourcesServer interface {
	mustEmbedUnimplementedInfraResourcesServer()
}

func RegisterInfraResourcesServer(s grpc.ServiceRegistrar, srv InfraResourcesServer) {
	s.RegisterService(&InfraResources_ServiceDesc, srv)
}

func _InfraResources_ProcessFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraResourcesServer).ProcessFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfraResources_ProcessFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraResourcesServer).ProcessFolder(ctx, req.(*ProcessFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfraResources_ServiceDesc is the grpc.ServiceDesc for InfraResources service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfraResources_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infrav1beta1.InfraResources",
	HandlerType: (*InfraResourcesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessFolder",
			Handler:    _InfraResources_ProcessFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "me/finiteloop/v1beta1/resources.proto",
}
